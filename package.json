{
  "name": "spellwriters",
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --watch --configuration development -o --port 9104",
    "start:electron": "wait-on http://localhost:9335/ && cd electron && npm start",
    "start:both": "concurrently --kill-others -n angular,electron \"npm start\" \"npm run start:electron\"",
    "build": "npm run lint && npm run gamedata && npm run validate && npm run build:versioninfo && npm run build:app",
    "build:app": "ng build --configuration production && npm run build:copypost",
    "build:electron": "npm run build && npm run build:syncversion && npm run build:electron:package",
    "build:electron:package": "cd electron && npm run make",
    "build:copypost": "cpy CHANGELOG.md CHANGELOG-current.md dist/browser/assets",
    "build:dirtycheck": "ts-node scripts/build-dirtycheck",
    "build:syncversion": "ts-node scripts/build-syncversion",
    "build:reversion": "ts-node scripts/build-reversion",
    "build:versioninfo": "ts-node scripts/build-versioninfo",
    "blogpost:generate": "ts-node scripts/build-blog-version-notes",
    "changelog:generate": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0",
    "changelog:generate:current": "conventional-changelog -p angular -o CHANGELOG-current.md -r 2",
    "changelog:commit": "git commit CHANGELOG.md CHANGELOG-current.md -m \"Update changelog\" || true",
    "preversion": "npm run build:dirtycheck && npm run lint && npm run build",
    "version": "conventional-changelog -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md && npm run build:syncversion",
    "postversion": "npm run changelog:generate && npm run changelog:generate:current && npm run changelog:commit && npm run build:reversion && npm run push",
    "push": "git push && git push --tags",
    "bump:patch": "npm version patch -m \"chore(release): Patch %s\"",
    "bump:minor": "npm version minor -m \"chore(release): Minor %s\"",
    "bump:major": "npm version major -m \"chore(release): Major %s\"",
    "lint": "ng lint",
    "gamedata": "npm run clean && npm run content && npm run validate && npm run generate && npm run mod",
    "clean": "rimraf data/mod && rimraf src/assets/mods && rimraf dist && rimraf electron/browser && rimraf electron/icons && rimraf electron/out",
    "content": "npm run content:aipatterns && npm run content:spellpatterns && npm run content:spelltags && npm run content:elements && npm run content:spells && npm run content:characters",
    "content:mod": "ts-node scripts/build-default-mod",
    "content:single": "ts-node scripts/build-content",
    "content:elements": "npm run content:single -- elements",
    "content:aipatterns": "npm run content:single -- ai-patterns",
    "content:spellpatterns": "npm run content:single -- spell-patterns",
    "content:spelltags": "npm run content:single -- spell-tags",
    "content:characters": "npm run content:single -- characters",
    "content:spells": "npm run content:single -- spells",
    "mod": "npm run mod:build:core && npm run mod:build:default",
    "mod:build:default": "ts-node scripts/mod-build-default",
    "mod:build:core": "ts-node scripts/mod-build-core",
    "generate": "npm run generate:spritesheets && npm run generate:iconfolders",
    "generate:iconfolders": "ts-node scripts/generate-iconfolders",
    "generate:spritesheets": "ts-node scripts/generate-spritesheets",
    "validate": "npm run validate:aipatterns && npm run validate:spellpatterns && npm run validate:spelltags && npm run validate:elements && npm run validate:spells && npm run validate:characters",
    "validate:elements": "ts-node scripts/validate-elements",
    "validate:aipatterns": "ts-node scripts/validate-aipatterns",
    "validate:spellpatterns": "ts-node scripts/validate-spellpatterns",
    "validate:spelltags": "ts-node scripts/validate-spelltags",
    "validate:characters": "ts-node scripts/validate-characters",
    "validate:spells": "ts-node scripts/validate-spells"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.1.1",
    "@angular/common": "^17.1.1",
    "@angular/compiler": "^17.1.1",
    "@angular/core": "^17.1.1",
    "@angular/forms": "^17.1.1",
    "@angular/platform-browser": "^17.1.1",
    "@angular/platform-browser-dynamic": "^17.1.1",
    "@angular/router": "^17.1.1",
    "@ng-bootstrap/ng-bootstrap": "^16.0.0",
    "@popperjs/core": "^2.11.8",
    "angular-svg-icon": "^17.0.0",
    "bootstrap": "^5.3.2",
    "lodash.clonedeep": "^4.5.0",
    "lodash.groupby": "^4.6.0",
    "lodash.sortby": "^4.7.0",
    "ngx-webstorage": "^13.0.1",
    "rollbar": "^2.26.2",
    "rxjs": "~7.8.0",
    "seedrandom": "^3.0.5",
    "tslib": "^2.3.0",
    "uuid": "^9.0.1",
    "zone.js": "~0.14.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.1.1",
    "@angular-eslint/builder": "17.2.0",
    "@angular-eslint/eslint-plugin": "17.2.0",
    "@angular-eslint/eslint-plugin-template": "17.2.0",
    "@angular-eslint/schematics": "17.2.0",
    "@angular-eslint/template-parser": "17.2.0",
    "@angular-eslint/utils": "^17.2.0",
    "@angular/cli": "^17.1.1",
    "@angular/compiler-cli": "^17.1.1",
    "@angular/localize": "^17.1.1",
    "@types/fs-extra": "^11.0.4",
    "@types/imagemin": "^8.0.5",
    "@types/imagemin-webp": "^7.0.3",
    "@types/jimp": "^0.2.28",
    "@types/js-yaml": "^4.0.9",
    "@types/lodash.clonedeep": "^4.5.9",
    "@types/lodash.groupby": "^4.6.9",
    "@types/lodash.sortby": "^4.7.9",
    "@types/recursive-readdir": "^2.2.4",
    "@types/seedrandom": "^3.0.8",
    "@types/uuid": "^9.0.7",
    "@typescript-eslint/eslint-plugin": "6.18.0",
    "@typescript-eslint/parser": "6.18.0",
    "concurrently": "^8.2.2",
    "conventional-changelog-cli": "^4.1.0",
    "cpy-cli": "^5.0.0",
    "eslint": "^8.56.0",
    "fs-extra": "^11.2.0",
    "git-describe": "^4.1.1",
    "imagemin": "^7.0.1",
    "imagemin-webp": "^6.1.0",
    "jimp": "^0.22.10",
    "js-yaml": "^4.1.0",
    "recursive-readdir": "^2.2.3",
    "rimraf": "^5.0.5",
    "ts-node": "^10.9.2",
    "typescript": "~5.2.2",
    "wait-on": "^7.2.0"
  }
}
